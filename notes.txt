What is the Software Development LifeCycle?
SDLC or the Software Development Life Cycle is a process that produces software with the highest quality and lowest cost in the shortest time possible.SDLC helps in improving the quality of software and easing the overall process of designing it.

The software development lifecycle has six stages. These include;
Planning. Here the development team uses input from customers, market surveys, and other departments relevant to the project to  plan the project approach. 

Defining. Here a Software Requirement Specification is written to define all requirements that need to be developed and designed for this project.

Designing. Here the design is implemented in a detailed and organised manner to make code generation easier.

Building. The product is built in this stage using the best code practices and guidelines to make debugging easier and quicker as well as to make code readable to other developers.

Testing. Although testing is usually at all stages of modern software development life cycles, here we are referring to testing the stage or part of the product where a defect has been detected.

Deployment. After thorough testing, the product is released in the market for consumer use. After deployment, maintenance is done based on user feedback and other issues that may arise.

Name 3 Software Companies and give their software development lifecycle. 

Netflix
The software construction life cycle used at Netflix by the edge engineering team.
Netflix has used full-cycle development where the developers are responsible and take ownership of given aspects of service delivery such as deploying, monitoring, and maintaining the services they develop.
Here is the process:

Design. The developers actively contribute to the design process ensuring technical feasibility and user friendliness.
They work closely with the designers, product managers, and other involved parties to create a user-centric design.
They also carry out prototyping of designs while rotating on user feedback.

Development. They write, test, and debug code and use agile methodologies such as sprints and continuous Integration to allow them to have frequent releases.

Testing. In this software development cycle, the developers write unit tests to capture bugs early and improve code quality.
Testing is also incorporated into the Continuous Integration pipeline to prevent bugs from reaching production.

Deployment. Developers own the deployment process by managing infrastructure, pushing code to production environments, and carrying out frequent rollouts to deliver features faster.

Operations.  The developers also monitor and maintain the software in production, as well as identify and solve issues on time.

Support. In this development life cycle, developers go ahead to partake in customer support.

Amazon
The Software Development LifeCycle used by Amazon
The software development lifecycle (SDLC) outlines several tasks required to build a software application. The development process goes through several stages as developers add new features and fix bugs in the software.

Steps in the LifeCycle:
Plan
The planning phase typically includes tasks like cost-benefit analysis, scheduling, resource estimation, and allocation. The development team collects requirements from several stakeholders such as customers, internal and external experts, and managers to create a software requirement specification document.
The document sets expectations and defines common goals that aid in project planning. The team estimates costs, creates a schedule, and has a detailed plan to achieve their goals.

Design
In the design phase, software engineers analyze requirements and identify the best solutions to create the software. For example, they may consider integrating pre-existing modules, make technology choices, and identify development tools. They will look at how to best integrate the new software into any existing IT infrastructure the organization may have.

Implement
In the implementation phase, the development team codes the product. They analyze the requirements to identify smaller coding tasks they can do daily to achieve the final result.

Test
The development team combines automation and manual testing to check the software for bugs. Quality analysis includes testing the software for errors and checking if it meets customer requirements. Because many teams immediately test the code they write, the testing phase often runs parallel to the development phase.

Deploy
When teams develop software, they code and test on a different copy of the software than the one that the users have access to. The software that customers use is called production, while other copies are said to be in the build environment or testing environment.
Having separate build and production environments ensures that customers can continue to use the software even while it is being changed or upgraded. The deployment phase includes several tasks to move the latest build copy to the production environment, such as packaging, environment configuration, and installation.

Maintain
In the maintenance phase, among other tasks, the team fixes bugs, resolves customer issues, and manages software changes. In addition, the team monitors overall system performance, security, and user experience to identify new ways to improve the existing software.

SPOTIFY
Spotify's SDLC is particularly interesting as it deviates from traditional frameworks and takes a more "culture-based" approach focused on autonomy, communication, accountability, and quality. While agile principles heavily influence their process, they don't adhere to any single methodology, favoring flexibility and adaptation. Here's a breakdown of key aspects:


SDLC Phases:
1. Ideation and Planning: Squads identify opportunities and define goals, with input from stakeholders. User needs and data heavily influence planning.

2. Development: Agile practices like sprints and backlog prioritization are common. Frequent releases and iterations based on user feedback are encouraged.

3. Deployment and Operations: Features are deployed gradually through automated pipelines, minimizing risk and disruption. Continuous monitoring and feedback loops ensure smooth operations.

Key Principles:
Autonomy: Squads own their decisions and execution, fostering ownership and innovation.
Communication: Collaboration and knowledge sharing are actively encouraged through various channels.
Accountability: Squads are responsible for their deliverables and track progress through data and metrics.
Quality: Continuous feedback loops, automated testing, and code reviews ensure high standards.


Security:
-Integrated throughout the SDLC, with tools like Snyk scanning code for vulnerabilities.
-Security champions in guilds raise awareness and promote best practices.
